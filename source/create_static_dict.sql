/*------------------------------------------------------------------------------------------------*/
/* Author:  Alfred Gerke (AGE)                                                  
/* Date:    2015-07-10                                                        
/* Purpose: Erstellt das statische Dcitionary   
/*                                                                              
/*------------------------------------------------------------------------------------------------*/
/* - Das Script arbeitet mit Befehlen der SQL-Erweiterung für FireBird 2.5.x   
/* - Das Script ist für die Ausführung im ISQL erstellt worden
/*              
/*------------------------------------------------------------------------------------------------*/
/* History: 2015-07-10
/*          Script erstellen
/*------------------------------------------------------------------------------------------------*/

/* Sequences -------------------------------------------------------------------------------------*/
CREATE SEQUENCE SDDL$SEQ_CODE_VALID_ARGUMENT_ID;

COMMENT ON SEQUENCE SDDL$SEQ_CODE_VALID_ARGUMENT_ID
IS 'Primärschlüssel für SDDL$CODE_VALID_ARGUMENT';

/* ------ */

CREATE SEQUENCE SDDL$SEQ_CODE_VALID_COMMAND_ID;

COMMENT ON SEQUENCE SDDL$SEQ_CODE_VALID_COMMAND_ID
IS 'Primärschlüssel für SDDL$CODE_VALID_COMMAND';

/* ------ */

CREATE SEQUENCE SDDL$SEQ_DYN_TABLECOMMENT_ID;

COMMENT ON SEQUENCE SDDL$SEQ_DYN_TABLECOMMENT_ID
IS 'Primärschlüssel für SDDL$DYN_TABLECOMMENT';

/* ------ */

CREATE SEQUENCE SDDL$SEQ_DYN_FIELDCOMMENT_ID;

COMMENT ON SEQUENCE SDDL$SEQ_DYN_FIELDCOMMENT_ID
IS 'Primärschlüssel für SDDL$DYN_FIELDCOMMENT'; 

/* Domains ---------------------------------------------------------------------------------------*/
CREATE DOMAIN SDDL$DN_DESCRIPTION
AS VARCHAR(2000);

COMMENT ON DOMAIN SDDL$DN_DESCRIPTION 
IS 'Beschreibung';

/* ------ */

CREATE DOMAIN SDDL$DN_VALID_ARGUMENT
AS VARCHAR(10)
NOT NULL;

COMMENT ON DOMAIN SDDL$DN_VALID_ARGUMENT 
IS 'Erlaubtes Argument';

/* ------ */

CREATE DOMAIN SDDL$DN_VALID_COMMAND
AS VARCHAR(10)
NOT NULL;

COMMENT ON DOMAIN SDDL$DN_VALID_COMMAND 
IS 'Erlaubte Befehle';

/* ------ */

CREATE DOMAIN SDDL$DN_SHORT_TEXT
AS VARCHAR(254)
NOT NULL;

COMMENT ON DOMAIN SDDL$DN_SHORT_TEXT 
IS 'Varchar mit 254 Zeichen';

/* ------ */

CREATE DOMAIN SDDL$DN_OBJ_NAME
AS VARCHAR(31)
NOT NULL;

COMMENT ON DOMAIN SDDL$DN_OBJ_NAME 
IS '31 Zeichen für einen Datenbankobjektnamen';

/* ------ */

CREATE DOMAIN DICT_PRIMARY_KEY
AS BIGINT
NOT NULL;

COMMENT ON DOMAIN DICT_PRIMARY_KEY 
IS 'Primärschlüssel';

/* ------ */

CREATE DOMAIN SDDL$DN_FOREIGN_KEY
AS BIGINT;

COMMENT ON DOMAIN SDDL$DN_FOREIGN_KEY 
IS 'Fremdschlüssel';

/* ------ */

CREATE DOMAIN SDDL$DN_ORIGIN_TYPE
AS VARCHAR(10)
DEFAULT 'UNKOWN'
NOT NULL
CHECK (VALUE IN ('UNKNOWN', 'TABLE', 'FIELD'));

COMMENT ON DOMAIN SDDL$DN_ORIGIN_TYPE
IS 'Quelle der sDDL Befehle';

/* ------ */

CREATE DOMAIN SDDL$DN_COMMAND_CHAIN
AS VARCHAR(4000)
DEFAULT ''
NOT NULL;

COMMENT ON DOMAIN SDDL$DN_COMMAND_CHAIN
IS 'Befehlskette';

/* ------ */

CREATE DOMAIN SDDL$DN_ORIGINAL_COMMENT
AS VARCHAR(4000)
DEFAULT ''
NOT NULL;

COMMENT ON DOMAIN SDDL$DN_ORIGINAL_COMMENT
IS 'Kommentar ohne Befehlskette';

/* Tables ----------------------------------------------------------------------------------------*/
CREATE TABLE SDDL$DICT_SETTING
(
  SECTION SDDL$DN_SHORT_TEXT,
  IDENT SDDL$DN_SHORT_TEXT,
  RESULT_VALUE SDDL$DN_SHORT_TEXT
);

COMMENT ON TABLE SDDL$DICT_SETTING
IS 'Einstellungen für sDDL';

COMMENT ON COLUMN SDDL$DICT_SETTING.SECTION
IS 'Sektion';

COMMENT ON COLUMN SDDL$DICT_SETTING.IDENT
IS 'Ident';

COMMENT ON COLUMN SDDL$DICT_SETTING.RESULT_VALUE
IS 'Value';

/* ------ */

CREATE TABLE SDDL$DYN_TABLECOMMENT  
(
  ID DICT_PRIMARY_KEY,
  DB_OJB_NAME SDDL$DN_OBJ_NAME,
  ORIGIN_TYPE SDDL$DN_ORIGIN_TYPE,
  COMMAND_CHAIN SDDL$DN_COMMAND_CHAIN,
  ORIGINAL_COMMENT SDDL$DN_ORIGINAL_COMMENT,
  CONSTRAINT PK_DYN_TABLECOMMENT
    PRIMARY KEY (ID)
);

COMMENT ON TABLE SDDL$DYN_TABLECOMMENT
IS 'Tabellenkomentare und Befehlsketten';

COMMENT ON COLUMN SDDL$DYN_TABLECOMMENT.ID
IS 'Primärschlüssel';

COMMENT ON COLUMN SDDL$DYN_TABLECOMMENT.DB_OJB_NAME
IS 'Name der Tabelle';

COMMENT ON COLUMN SDDL$DYN_TABLECOMMENT.ORIGIN_TYPE
IS 'Herkunft von Originalkommentar und Befehlskette';

COMMENT ON COLUMN SDDL$DYN_TABLECOMMENT.COMMAND_CHAIN
IS 'Befehlskette getrennt vom Originalkommentar';

COMMENT ON COLUMN SDDL$DYN_TABLECOMMENT.ORIGINAL_COMMENT
IS 'Originalkommentar für das DB Objekt';

/* ------ */

CREATE TABLE SDDL$DYN_FIELDCOMMENT  
(
  ID DICT_PRIMARY_KEY,
  TABLE_ID SDDL$DN_FOREIGN_KEY,
  DB_OJB_NAME SDDL$DN_OBJ_NAME,
  ORIGIN_TYPE SDDL$DN_ORIGIN_TYPE,
  COMMAND_CHAIN SDDL$DN_COMMAND_CHAIN,
  ORIGINAL_COMMENT SDDL$DN_ORIGINAL_COMMENT,
  CONSTRAINT PK_DYN_FIELDCOMMENT
    PRIMARY KEY (ID),
  CONSTRAINT FK_FT_DYN_FIELDCOMMENT_TABLE 
    FOREIGN KEY (TABLE_ID) REFERENCES SDDL$DYN_TABLECOMMENT (ID)
    ON DELETE SET NULL ON UPDATE CASCADE
);

COMMENT ON TABLE SDDL$DYN_FIELDCOMMENT
IS 'Feldkomentare und Befehlsketten';

COMMENT ON COLUMN SDDL$DYN_FIELDCOMMENT.ID
IS 'Primärschlüssel';

COMMENT ON COLUMN SDDL$DYN_FIELDCOMMENT.TABLE_ID
IS 'Fremdschlüssel aus SDDL$DYN_TABLECOMMENT';

COMMENT ON COLUMN SDDL$DYN_FIELDCOMMENT.DB_OJB_NAME
IS 'Name des Feldes';

COMMENT ON COLUMN SDDL$DYN_FIELDCOMMENT.ORIGIN_TYPE
IS 'Herkunft von Originalkommentar und Befehlskette';

COMMENT ON COLUMN SDDL$DYN_FIELDCOMMENT.COMMAND_CHAIN
IS 'Befehlskette getrennt vom Originalkommentar';

COMMENT ON COLUMN SDDL$DYN_FIELDCOMMENT.ORIGINAL_COMMENT
IS 'Originalkommentar für das DB Objekt';

/* ------ */

CREATE TABLE SDDL$CODE_VALID_COMMAND 
(
  ID DICT_PRIMARY_KEY,
  CAPTION SDDL$DN_VALID_COMMAND,
  DESCRIPTION SDDL$DN_DESCRIPTION,
  CONSTRAINT PK_CODE_VALID_COMMAND
    PRIMARY KEY (ID),
  CONSTRAINT UNQ_CODE_VALID_COMMAND_CAPTION 
    UNIQUE (CAPTION)
);

COMMENT ON TABLE SDDL$CODE_VALID_COMMAND
IS 'Erlaubte SDDL Befehle';

COMMENT ON COLUMN SDDL$CODE_VALID_COMMAND.ID
IS 'Primärschlüssel';

COMMENT ON COLUMN SDDL$CODE_VALID_COMMAND.CAPTION
IS 'Bezeichnung';

COMMENT ON COLUMN SDDL$CODE_VALID_COMMAND.DESCRIPTION
IS 'Beschreibung';

/* ------ */

CREATE TABLE SDDL$CODE_VALID_ARGUMENT 
(
  ID DICT_PRIMARY_KEY,
  CAPTION SDDL$DN_VALID_ARGUMENT,
  DESCRIPTION SDDL$DN_DESCRIPTION,
  CONSTRAINT PK_CODE_VALID_ARGUMENT
    PRIMARY KEY (ID),
  CONSTRAINT UNQ_CODE_VALID_ARGUMENT_CAPTION 
    UNIQUE (CAPTION) 
);

COMMENT ON TABLE SDDL$CODE_VALID_ARGUMENT
IS 'Erlaubte Argumente';

COMMENT ON COLUMN SDDL$CODE_VALID_ARGUMENT.ID
IS 'Primärschlüssel';

COMMENT ON COLUMN SDDL$CODE_VALID_ARGUMENT.CAPTION
IS 'Bezeichnung';

COMMENT ON COLUMN SDDL$CODE_VALID_ARGUMENT.DESCRIPTION
IS 'Beschreibung';

/* ------ */

CREATE TABLE SDDL$CODE_REL_CMD_ARG 
(
  COMMAND SDDL$DN_VALID_COMMAND,
  ARGUMENT SDDL$DN_VALID_ARGUMENT,
  CONSTRAINT PK_CODE_REL_COMMAND_ARGUMENT
    PRIMARY KEY (COMMAND, ARGUMENT),
  CONSTRAINT FK_FT_CODE_REL_CMD_ARG1 
    FOREIGN KEY (COMMAND) REFERENCES SDDL$CODE_VALID_COMMAND (CAPTION)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT FK_FT_CODE_REL_CMD_ARG2 
    FOREIGN KEY (ARGUMENT) REFERENCES SDDL$CODE_VALID_ARGUMENT (CAPTION)
    ON DELETE CASCADE ON UPDATE CASCADE       
);

COMMENT ON TABLE SDDL$CODE_REL_CMD_ARG
IS 'Befehle mit Argumenten verbinden';

COMMENT ON COLUMN SDDL$CODE_REL_CMD_ARG.COMMAND
IS 'Primärschlüssel';

COMMENT ON COLUMN SDDL$CODE_REL_CMD_ARG.ARGUMENT
IS 'Bezeichnung';

/* Trigger ---------------------------------------------------------------------------------------*/
SET TERM ^ ;
CREATE TRIGGER SDDL$TRG_DYN_TABLECOMMENT_BI FOR SDDL$DYN_TABLECOMMENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
	if (new.ID is null) then
    new.ID = next value for SDDL$SEQ_DYN_TABLECOMMENT_ID; 
    
  if (new.ORIGIN_TYPE is null) then
    new.ORIGIN_TYPE = 'TABLE';  
END^
SET TERM ; ^

/* ------ */

SET TERM ^ ;
CREATE TRIGGER SDDL$TRG_DYN_FIELDCOMMENT_BI FOR SDDL$DYN_FIELDCOMMENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
	if (new.ID is null) then
    new.ID = next value for SDDL$SEQ_DYN_FIELDCOMMENT_ID; 
    
  if (new.ORIGIN_TYPE is null) then
    new.ORIGIN_TYPE = 'FIELD';  
END^
SET TERM ; ^

/* ------ */

SET TERM ^ ;
CREATE TRIGGER SDDL$TRG_CODE_VALID_COMMAND_BI FOR SDDL$CODE_VALID_COMMAND
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
	if (new.ID is null) then
    new.ID = next value for SDDL$SEQ_CODE_VALID_COMMAND_ID; 
END^
SET TERM ; ^  
  
/* ------ */

SET TERM ^ ;
CREATE TRIGGER SDDL$TRG_CODE_VALID_ARGUMENT_BI FOR SDDL$CODE_VALID_ARGUMENT
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
	if (new.ID is null) then
    new.ID = next value for SDDL$SEQ_CODE_VALID_ARGUMENT_ID; 
END^
SET TERM ; ^

/* Views -----------------------------------------------------------------------------------------*/
CREATE OR ALTER VIEW SDDL$V_DICT_SETTING ( 
  SECTION,
  IDENT,
  RESULT_VALUE)
AS
SELECT
  SECTION,
  IDENT,
  RESULT_VALUE
FROM
  SDDL$DICT_SETTING;
  
COMMENT ON VIEW SDDL$V_DICT_SETTING
IS 'Standardview für SDDL$DICT_SETTING';  
  
/* ------ */  
  
CREATE OR ALTER VIEW SDDL$V_DYN_TABLECOMMENT (
  ID,
  DB_OJB_NAME,
  ORIGIN_TYPE,
  COMMAND_CHAIN,
  ORIGINAL_COMMENT)
AS
SELECT
  ID,
  DB_OJB_NAME,
  ORIGIN_TYPE,
  COMMAND_CHAIN,
  ORIGINAL_COMMENT
FROM
  SDDL$DYN_TABLECOMMENT;
  
COMMENT ON VIEW SDDL$V_DYN_TABLECOMMENT
IS 'Standardview für SDDL$DYN_TABLECOMMENT';     
  
/* ------ */  
  
CREATE OR ALTER VIEW SDDL$V_DYN_FIELDCOMMENT (
  ID,
  TABLE_ID,
  DB_OJB_NAME,
  ORIGIN_TYPE,
  COMMAND_CHAIN,
  ORIGINAL_COMMENT)
AS
SELECT
  ID,
  TABLE_ID,
  DB_OJB_NAME,
  ORIGIN_TYPE,
  COMMAND_CHAIN,
  ORIGINAL_COMMENT
FROM
  SDDL$DYN_FIELDCOMMENT;
  
COMMENT ON VIEW SDDL$V_DYN_FIELDCOMMENT
IS 'Standardview für SDDL$DYN_FIELDCOMMENT';  

/* ------ */

CREATE OR ALTER VIEW SDDL$V_CODE_VALID_COMMAND(
  ID,
  CAPTION,
  DESCRIPTION)
AS
SELECT
  ID,
  CAPTION,
  DESCRIPTION
FROM
  SDDL$CODE_VALID_COMMAND;   

COMMENT ON VIEW SDDL$V_CODE_VALID_COMMAND
IS 'Standardview für SDDL$CODE_VALID_COMMAND';

/* ------ */

CREATE OR ALTER VIEW SDDL$V_CODE_VALID_ARGUMENT(
  ID,
  CAPTION,
  DESCRIPTION)
AS
SELECT
  ID,
  CAPTION,
  DESCRIPTION
FROM
  SDDL$CODE_VALID_ARGUMENT;   

COMMENT ON VIEW SDDL$V_CODE_VALID_ARGUMENT
IS 'Standardview für SDDL$CODE_VALID_ARGUMENT';

/* ------ */

CREATE OR ALTER VIEW SDDL$V_CODE_REL_CMD_ARG(
  COMMAND,
  ARGUMENT)
AS
SELECT
  COMMAND,
  ARGUMENT
FROM
  SDDL$CODE_REL_CMD_ARG;
  
COMMENT ON VIEW SDDL$V_CODE_REL_CMD_ARG
IS 'Standardview für SDDL$CODE_REL_CMD_ARG';  

/* SPs -------------------------------------------------------------------------------------------*/
SET TERM ^ ;
CREATE OR ALTER PROCEDURE SDDL$SP_GET_SETTING(
  ASection SDDL$DN_SHORT_TEXT,
  AIdent SDDL$DN_SHORT_TEXT,
  ADefault SDDL$DN_SHORT_TEXT) 
RETURNS ( 
  RESULT_VALUE SDDL$DN_SHORT_TEXT)
AS 
BEGIN
  RESULT_VALUE = ADefault;
  
  select 
    RESULT_VALUE
  from 
    SDDL$V_DICT_SETTING
  where 
    SECTION=:ASection
  and 
    IDENT=:AIdent
  into 
    :RESULT_VALUE;
  
  suspend;
END^
SET TERM ; ^

COMMENT ON PROCEDURE SDDL$SP_GET_SETTING 
IS 'Ermittelt einen Eintrag aus der Setting Tabelle';

/* ------ */

SET TERM ^ ;
CREATE OR ALTER PROCEDURE SDDL$SP_SET_SETTING(
  ASection SDDL$DN_SHORT_TEXT,
  AIdent SDDL$DN_SHORT_TEXT,
  AValue SDDL$DN_SHORT_TEXT)
AS 
BEGIN
  update or insert
  into
  SDDL$V_DICT_SETTING
  (
    SECTION,
    IDENT,
    RESULT_VALUE
  )
  values
  (
    :ASection,
    :AIdent,
    :AValue
  )
  matching (SECTION, IDENT);
END^
SET TERM ; ^

COMMENT ON PROCEDURE SDDL$SP_SET_SETTING 
IS 'Fügt einen Eintrag in die Setting Tabelle ein bzw. aktualisiert einen bestehenden Eintrag';

/*------------------------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------------------------*/  
/*------------------------------------------------------------------------------------------------*/